{
  
    
        "post0": {
            "title": "Hold up. Is that a Gooey",
            "content": "S.E.E. Food, a Shazam for Food. . I recently rewatched one of my favorite shows: HBO&#39;s hit comedy Silicon Valley. Probably one of the most memorable b-plots from Season 4 was Jian Yang&#39;s &quot;Shazam for Food&quot; app. . . I figured with the fast.ai image classification library, built on State of the Art neural networks, we might be able to fare a bit better than young Jinnathan and recognize more food than hot dogs and not hot dogs. . Fast.AI: No Math? No Problem. . Despite what the name might have you believe, the best thing about fast.ai is actually its fastness. And also its AI. The core philosophy of this hip new online deep learning course is hands on, practical examples before the a dump of (frankly) incomprehensible math. . . I&#39;ve always been a kinetic learner. I need to touch and play with things in order to really understand them. Books and lectures put me right to sleep. Needless to say, this approach of showing the end result first really appealed to me. . That&#39;s also to say, I kind of don&#39;t know what I&#39;m doing here. So bear with me as I attempt to explain this totally-not-copied-from-the-lecture-notes Jupyter notebook. Also, we like to play things fast and loose around here. If you&#39;re a kid, I&#39;d suggest you go back to watching Arthur or something. There are some bad words in this motherfucker. . That&#39;s a &quot;Bing&quot;-o!...is that the expression, that&#39;s a bingo? . So it turns out that Bing is more than just the place you go to look up how to change your default search engine to Google. . . haha. But all due respect to Microsoft, I was MacroHard when I saw their image search offerings. It really saves me the hassle of having to scrape the internet for thousands of food pictures. Time to put away those Puppeteer scripts. . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;XXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;) . search_images_bing . &lt;function fastbook.search_images_bing&gt; . results = search_images_bing(key, &#39;hot dog&#39;) ims = results.attrgot(&#39;content_url&#39;) len(ims) print(ims) . (#150) [&#39;http://www.wikihow.com/images/e/ea/Make-a-Kraut-Stuffed-Hot-Dog-Step-5.jpg&#39;,&#39;https://cbsnews1.cbsistatic.com/hub/i/2017/07/17/99104db6-901b-4fd2-8d8f-ac633a2d9f4c/hot-dogs.jpg&#39;,&#39;https://www.gannett-cdn.com/-mm-/84fb237ce8155d441c3c3be2c67ffcff2bcfd6ab/c=0-26-508-313&amp;r=x803&amp;c=1600x800/local/-/media/2017/07/21/USATODAY/USATODAY/636362295294420072-GettyImages-494317722.jpg&#39;,&#39;https://rapidbrandsinc.com/wp-content/uploads/2017/05/Screenshot-1500x1080.png&#39;,&#39;https://img.huffingtonpost.com/asset/564243d1180000a700304513.jpeg?ops=1910_1000&#39;,&#39;https://shitmycakesays.files.wordpress.com/2012/07/hot-dog.jpeg&#39;,&#39;https://www.wikihow.com/images/d/d6/Bake-Hot-Dogs-Step-13.jpg&#39;,&#39;https://article.images.consumerreports.org/prod/content/dam/CRO%20Images%202018/Health/July/CR-Health-InlineHero-Healthy-HotDogs-07-18.jpg&#39;,&#39;http://i.huffpost.com/gen/1840531/thumbs/o-HOT-DOG-KETCHUP-facebook.jpg&#39;,&#39;https://static.independent.co.uk/s3fs-public/thumbnails/image/2017/04/06/18/hot-dog-istock-bhofack2-.jpg&#39;...] . Not Hot Dog . Unlike the TV counterpart, our SeeFood is going to support more than just hotdogs. I&#39;ve got some omelette, rice, fried chicken and hamburger, in addition to pizza and spaghetti, the two foods that they actually tried in the show. . I&#39;m just now realizing octopus would&#39;ve been a good addition. . Anyways, in the code below, we&#39;re gonna loop through our food types and use Bing&#39;s image search to download about 150 photos per type. We&#39;ll also get rid of all the images that are invalid. This takes a long ass time . types = &#39;hot dog&#39;,&#39;pizza&#39;, &#39;omelette&#39;, &#39;rice&#39;, &#39;spaghetti&#39;, &#39;fried chicken&#39;, &#39;hamburger&#39; path = Path(&#39;food&#39;) . if not path.exists(): path.mkdir() for o in types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o}&#39;) download_images(dest, urls=results.attrgot(&#39;content_url&#39;)) . fns = get_image_files(path) fns . failed = verify_images(fns) failed . failed.map(Path.unlink); . Big Boy Machine Learning. . Time for the secret sauce. Let&#39;s teach this bitch computer to learn. But before we do that, we gotta set up some Fast AI specific data structures for fetching our images, splitting up our training and validation sets, assigning labels, and resizing our iamges. The DataBlock class does exactly that. . We&#39;ve also gotta do some data augmentation. This helps the model performance by basically zooming in on different parts of the picture after each epoch. I just picture a geriatric robot looking at a picture close up and moving it around to really study the heck out of it. . . db = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = db.dataloaders(path) . db = db.new( item_tfms=RandomResizedCrop(224, min_scale=0.3), batch_tfms=aug_transforms()) dls = db.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . Hamburger Cheeseburger Big Mac Whopper . Quotes from the underground: . &quot;Who deleted my spaghetti?&quot; . &quot;A chicken is not an omelette....oh shit, is it? ü§î &quot; . The model&#39;s not bad, about a 90% success rate. So we got some crappy images in our training and validation set. Some wise ass decided to upload pictures of hamburgers with pizzas on top and file them under &quot;hamburger&quot;. Can you really blame the bot? . But there are some other issues. I probably should have specified &quot;rice food&quot;. The model used images of Condoleeza Rice as part of the training set. . . I am not a food (Condoleeza Rice, in a speech to the U.N. General Assembly) . So we gotta clean this data up. Gotta really scrub it nice. Get between the a**cheeks. I really hope nobody ever reads this . cleaner = ImageClassifierCleaner(learn) cleaner . LGTM. Ship it. . My dudes. We have just built See Food the way it was meant to be built. I&#39;ll be taking that half a mil and palapa now. . In all seriousness, this whole process was refreshingly free of Sigmoid functions and partial derivatives. You&#39;ll notice the hard ML stuff was 2 lines of pretty short code. That&#39;s it! That&#39;s all it takes. Fuck was I even doing before amirite? . So now what? We have this cool model, but how do we get it into the hands of people to use? Well, look here son. We can actually export our model to a Pickle file. (It&#39;s the funniest shit I&#39;ve ever seen!). . . Cool thing is, we can actually unpack this file and run our prediction code without needing a GPU. So we can chuck this Pickle into the cloud, on CPU instances and start sending our requests there. But for now, we&#39;re going to just use some tools (Voila and Binder) to host our Jupyter notebook on Github pages for people to try out. . learn.export() . NameError Traceback (most recent call last) &lt;ipython-input-1-fa5b61306ef3&gt; in &lt;module&gt; -&gt; 1 learn.export() NameError: name &#39;learn&#39; is not defined . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;images/hot-dog.jpg&#39;) . learn_inf.dls.vocab . img = PILImage.create(btn_upload.data[-1]) out_pl = widgets.Output() lbl_pred = widgets.Label() btn_upload = widgets.FileUpload() btn_run = widgets.Button(description=&#39;Classify&#39;) . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;shazam for food&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . The end . So there you have it. A nice little hands on experiment for training and deploying an image classifier. The memes probably haven&#39;t aged well for those of you reading this in the future. And for those of you reading this in the past, please teach me how you traveled back in time so I can buy Tesla calls. . Also, if you want to see the end result . This truly is a special occasion. Thanks for reading. Like comment and subscribe. And click the bell to turn on notifications. . . (Seriously, my Twitter and Github are below if you want to talk to me. Please be patient though, because I am very introverted). .",
            "url": "https://david8zhang.github.io/ds-blog/2020/09/23/See-Food.html",
            "relUrl": "/2020/09/23/See-Food.html",
            "date": " ‚Ä¢ Sep 23, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats.¬†&#8617; . |",
          "url": "https://david8zhang.github.io/ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://david8zhang.github.io/ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}