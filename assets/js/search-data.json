{
  
    
        "post0": {
            "title": "Guild Manager Devlog 1",
            "content": "What is Guild Manager? . Guild manager is a tactical turn-based strategy game crossed with a fantasy sports / management simulation game. What do I mean by that? Well, the README I have on the github repo sums it up pretty well - Like Fire Emblem crossed with NBA 2k MyGM. . Why am I making this? . Ramble alert: TL;DR - I basically really like the front office management stuff in sports, and I want to put it in a game with a more exiciting setting . Around my freshman year of college, I started getting super into the NBA. I had always liked basketball. But I started appreciating sort of the more mundane aspects of the sport I had never even known about before - the front office, free agency, and the offseason trades. Teams would augment their existing squads or build brand new ones by signing free agents. It was fun watching organizations succeed or fail at putting all the pieces together to build a winning basketball team. It was as though they were optimizing a machine, swapping different parts out in hopes of making something that could spit out a championship. . . The draft was also one of my favorite things to watch. I liked the idea of young kids training, learning and growing to become future superstars. It was like watching a real life RPG. These young prospects, barely college freshmen, would level up (or in some cases, fail to level up) and gain new skills and abilities after every season. . . And that was when I thought to myself, why hasn’t all of this front office stuff been adapted into video games outside of the sports simulation genre? Despite being into the NBA draft and free agency, I was never really all that into the MyGM modes or fantasy sports or anything. It all seemed too overwhelming, like to know what to do I would have to study all the players’ real life statistics and all that. And then my immersion in the simulation would be shattered when my super star guy in the fantasy team would end up being garbage in real life. . . Plus, game settings can be so much more exciting than the boring ass real world. Why not have it be in a magical fantasy land or a crazy alien planet or something. I wanted to take these sim mechanics and spice it up a little by putting it in a different setting. . Existing games and inspriation . I actually think the game that all this front office stuff most reminded me of was actually Pokemon. There’s trading, battling, and training in Pokemon, much like trading, playing games, and player development in sports. There’s also sort of “drafting” in that you “draft” a new pokemon when you catch it. And there’s the team building / syngerizing aspect of it as well. . . But it’s not really the same. Unless you’re doing nuzlocke, Pokemon is mostly permanent - your mons never grow old and level down. You have a ton of control over who you can “draft” unlike in sports. It’s the same with trading. Maybe it’s just my personal experience, but trading to make your team “better” is sort of pointless if you’re just playing the story mode, since the story is so easy. And because it’s so easy, the need for having a super strong team aren’t really there. . . Guild-Tycoon, (My first, failed attempt) . My first attempt at making a game that would incorporate all of these elements was a pokemon-like clone. I called it Guild Tycoon - a game where you would manage a guild of fantasy heroes. You would start with a randomly generated team of heroes each with standard RPG-like stats (attack, defense, health, magic, etc.). They would have their own move-pool, which was comprised of both offensive damage-dealing moves and defensive buff moves. The battle system was a 3 vs. 3 turn-based system. . Though I had some familiarity with Unity for 2D game development, I considered myself a full-stack web developer specializing in building front end apps with ReactJS. The game was not going to have that much in the way of real-time graphics updates and was mostly going to be UI anyways. Since I really didn’t like the Unity UI system, I ended up just building a web-game using what I already knew best - ReactJS. . After several months of development, I pumped out this . I encountered a variety of problems. For starters, the game just wasn’t very fun. Turns out the pokemon turn based battling system, without all the bells and whistles and fun pokemon designs, was pretty boring. The free agency stuff, with its unintuitive, spreadsheet-like UI was this overcomplicated mess that was not much fun to look at. Ironically, that was one of my main complaints with 2k’s MyGM UI. Without any UI flair or polish, it didn’t much feel like a game, more like an accounting job. . . From a technical perspective. I bit off a bit more than I could chew when trying to implement all the Free Agency, Trading, and Drafting functionality. There were so many bugs and problems with all the mechanics I had tried to cram in. I didn’t put enough thought into how all the classes and modules would be organized, so the code became spaghetti and hard to modify. . Frustrated, I decided to just salvage the pokemon battle mechanics piece, the one part I had actually spent a lot of time carefully designing and testing. I took that and spun that out into its own little mini-game. I even made it so that you could upload your own “pokemon” and movesets in this admin / CMS tool. . Random battler . Random battler Admin tool . Of course, this wasn’t really what I had in mind. After spending months trying to make this work, I got too ambitious and scope creeped the project to the detriment of the code quality. I should have started small, or at the very least put some more time into the design of all the different systems I was implementing. . Guild Manager v.2, my second (and current) attempt . After a few months of working on a few other unrelated projects, I’m now working on a second version of this game. I’m building on React Native this time, since I spend more time playing NBA 2k20 Mobile than any other game, in all honesty. . For the second attempt, I’ve made a few changes: . The battle system is now a turn based Fire Emblem style system. This really opens up more strategizing and gameplay variety . | The teams are somewhat pre-set. I wanted to maybe incorporate a narrative to this game, so I have a set list of teams and logos to give the game some more personality instead of just having RNG take care of everything . | Characters can level up their stats after every match. This adds a sense of progression. Later, they may also regress after they surpass a certain age . | There’s actually a post-season playoff bracket. Increases the stakes and makes it more exciting . | There will be “announcers” for matches and also outside of matches to add some added flair and personality to all the things that are happening. . | . As I’m writing this, I’ve actually been developing the game for over three months. I’m a bit of a ways from just starting out now. But I figure it might be good to document the dev process so that I don’t make the same mistakes I did with the first iteration. I’m planning on recounting every major feature I developed over the past 3 months in a series of blog posts. This one will be the first in that series, although this one is mostly just background information and motivation for why I’m even building this. . I’m thinking as a rough outline for how I’ll document the features I developed: . Setting up regular season matchups | Battle system 1 - Turn based movement | Battle system 2 - Attacking, deaths, scoring | Battle system 3 - Skills | Battle system 4 - Respawning and invulnerability | Battle system 5 - Post match stats, stat gains | Playoff Bracket implementation | Offseason training camp | Contract management | Art and animation | Anyways, stay tuned for the next blog post, where I’ll be talking about setting up the game, team rosters, and initializing regular season matchups between teams. .",
            "url": "https://david8zhang.github.io/ds-blog/markdown/2021/01/06/Guild-Manager-Devlog-1.html",
            "relUrl": "/markdown/2021/01/06/Guild-Manager-Devlog-1.html",
            "date": " • Jan 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "S.E.E. Food, a Shazam for Food.",
            "content": "Inspiration . I recently rewatched one of my favorite shows: HBO&#39;s hit comedy Silicon Valley. Probably one of the most memorable b-plots from Season 4 was Jian Yang&#39;s &quot;Shazam for Food&quot; app. . . I figured with the fast.ai image classification library, built on State of the Art neural networks, we might be able to fare a bit better than young Jinnathan and recognize more food than hot dogs and not hot dogs. . Fast.AI: No Math? No Problem. . Despite what the name might have you believe, the best thing about fast.ai is actually its fastness. And also its AI. The core philosophy of this hip new online deep learning course is hands on, practical examples before the a dump of (frankly) incomprehensible math. . . I&#39;ve always been a kinetic learner. I need to touch and play with things in order to really understand them. Books and lectures put me right to sleep. Needless to say, this approach of showing the end result first really appealed to me. . That&#39;s also to say, I kind of don&#39;t know what I&#39;m doing here. So bear with me as I attempt to explain this totally-not-copied-from-the-lecture-notes Jupyter notebook. Also, we like to play things fast and loose around here. If you&#39;re a kid, I&#39;d suggest you go back to watching Arthur or something. There are some bad words in this motherfucker. . That&#39;s a &quot;Bing&quot;-o!...is that the expression, that&#39;s a bingo? . So it turns out that Bing is more than just the place you go to look up how to change your default search engine to Google. . . haha. But all due respect to Microsoft, I was MacroHard when I saw their image search offerings. It really saves me the hassle of having to scrape the internet for thousands of food pictures. Time to put away those Puppeteer scripts. . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;XXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;) . search_images_bing . &lt;function fastbook.search_images_bing&gt; . results = search_images_bing(key, &#39;hot dog&#39;) ims = results.attrgot(&#39;content_url&#39;) len(ims) print(ims) . (#150) [&#39;http://www.wikihow.com/images/e/ea/Make-a-Kraut-Stuffed-Hot-Dog-Step-5.jpg&#39;,&#39;https://cbsnews1.cbsistatic.com/hub/i/2017/07/17/99104db6-901b-4fd2-8d8f-ac633a2d9f4c/hot-dogs.jpg&#39;,&#39;https://www.gannett-cdn.com/-mm-/84fb237ce8155d441c3c3be2c67ffcff2bcfd6ab/c=0-26-508-313&amp;r=x803&amp;c=1600x800/local/-/media/2017/07/21/USATODAY/USATODAY/636362295294420072-GettyImages-494317722.jpg&#39;,&#39;https://rapidbrandsinc.com/wp-content/uploads/2017/05/Screenshot-1500x1080.png&#39;,&#39;https://img.huffingtonpost.com/asset/564243d1180000a700304513.jpeg?ops=1910_1000&#39;,&#39;https://shitmycakesays.files.wordpress.com/2012/07/hot-dog.jpeg&#39;,&#39;https://www.wikihow.com/images/d/d6/Bake-Hot-Dogs-Step-13.jpg&#39;,&#39;https://article.images.consumerreports.org/prod/content/dam/CRO%20Images%202018/Health/July/CR-Health-InlineHero-Healthy-HotDogs-07-18.jpg&#39;,&#39;http://i.huffpost.com/gen/1840531/thumbs/o-HOT-DOG-KETCHUP-facebook.jpg&#39;,&#39;https://static.independent.co.uk/s3fs-public/thumbnails/image/2017/04/06/18/hot-dog-istock-bhofack2-.jpg&#39;...] . Not Hot Dog . Unlike the TV counterpart, our SeeFood is going to support more than just hotdogs. I&#39;ve got some omelette, rice, fried chicken and hamburger, in addition to pizza and spaghetti, the two foods that they actually tried in the show. . I&#39;m just now realizing octopus would&#39;ve been a good addition. . Anyways, in the code below, we&#39;re gonna loop through our food types and use Bing&#39;s image search to download about 150 photos per type. We&#39;ll also get rid of all the images that are invalid. This takes a long ass time . types = &#39;hot dog&#39;,&#39;pizza&#39;, &#39;omelette&#39;, &#39;rice&#39;, &#39;spaghetti&#39;, &#39;fried chicken&#39;, &#39;hamburger&#39; path = Path(&#39;food&#39;) . if not path.exists(): path.mkdir() for o in types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o}&#39;) download_images(dest, urls=results.attrgot(&#39;content_url&#39;)) . fns = get_image_files(path) failed = verify_images(fns) failed.map(Path.unlink); . Big Boy Machine Learning. . Time for the secret sauce. Let&#39;s teach this bitch computer to learn. But before we do that, we gotta set up some Fast AI specific data structures for fetching our images, splitting up our training and validation sets, assigning labels, and resizing our iamges. The DataBlock class does exactly that. . We&#39;ve also gotta do some data augmentation. This helps the model performance by basically zooming in on different parts of the picture after each epoch. I just picture a geriatric robot looking at a picture close up and moving it around to really study the heck out of it. . . db = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = db.dataloaders(path) . db = db.new( item_tfms=RandomResizedCrop(224, min_scale=0.3), batch_tfms=aug_transforms()) dls = db.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . Hamburger Cheeseburger Big Mac Whopper . Quotes from the underground: . &quot;Who deleted my spaghetti?&quot; . &quot;A chicken is not an omelette....oh shit, is it? 🤔 &quot; . The model&#39;s not bad, about a 90% success rate. So we got some crappy images in our training and validation set. Some wise ass decided to upload pictures of hamburgers with pizzas on top and file them under &quot;hamburger&quot;. Can you really blame the bot? . But there are some other issues. I probably should have specified &quot;rice food&quot;. The model used images of Condoleeza Rice as part of the training set. . . I am not a food (Condoleeza Rice, in a speech to the U.N. General Assembly) . So we gotta clean this data up. Gotta really scrub it nice. Get between the a**cheeks. I really hope nobody ever reads this . cleaner = ImageClassifierCleaner(learn) cleaner . LGTM. Ship it. . My dudes. We have just built See Food the way it was meant to be built. I&#39;ll be taking that half a mil and palapa now. . In all seriousness, this whole process was refreshingly free of Sigmoid functions and partial derivatives. You&#39;ll notice the hard ML stuff was 2 lines of pretty short code. That&#39;s it! That&#39;s all it takes. Fuck was I even doing before amirite? . So now what? We have this cool model, but how do we get it into the hands of people to use? Well, look here son. We can actually export our model to a Pickle file. (It&#39;s the funniest shit I&#39;ve ever seen!). . . Cool thing is, we can actually unpack this file and run our prediction code without needing a GPU. So we can chuck this Pickle into the cloud, on CPU instances and start sending our requests there. But for now, we&#39;re going to just use some tools (Voila and Binder) to host our Jupyter notebook on Github pages for people to try out. . learn.export() path = Path() path.ls(file_exts=&#39;.pkl&#39;) learn_inf = load_learner(path/&#39;export.pkl&#39;) learn_inf.predict(&#39;images/hot-dog.jpg&#39;) learn_inf.dls.vocab . Hold up. Is that a Gooey . ohhh shit. Yes, python has support for GUI widgets. It&#39;s no React.JS. But it&#39;ll do for now. We can have some buttons and labels to really give the app some flair. . img = PILImage.create(btn_upload.data[-1]) out_pl = widgets.Output() lbl_pred = widgets.Label() btn_upload = widgets.FileUpload() btn_run = widgets.Button(description=&#39;Classify&#39;) . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;shazam for food&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . The end . So there you have it. A nice little hands on experiment for training and deploying an image classifier. The memes probably haven&#39;t aged well for those of you reading this in the future. And for those of you reading this in the past, please teach me how you traveled back in time so I can buy Tesla calls. . Also, if you want to see the end result . This truly is a special occasion. Thanks for reading. Like comment and subscribe. And click the bell to turn on notifications. . . (Seriously, my Twitter and Github are below if you want to talk to me. Please be patient though, because I am very introverted). .",
            "url": "https://david8zhang.github.io/ds-blog/2020/09/23/See-Food.html",
            "relUrl": "/2020/09/23/See-Food.html",
            "date": " • Sep 23, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://david8zhang.github.io/ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://david8zhang.github.io/ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}